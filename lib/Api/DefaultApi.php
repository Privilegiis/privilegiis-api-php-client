<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Privilegiis Partner API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createPrivilegeRequest
     *
     * Create a request for consuming a privilege. Antes de llamar a este metodo hemos tenido que realizar una llamada a getPrivilege. Este metodo nos devuelve un transactionId que hay que pasar ha este metodo para confirmar que el privilegio devuelto se ha consumido.
     *
     * @param \Swagger\Client\Model\NewPrivilegeValidation $new_privilege_validation The id of the privilege to retrieve. (required)
     * @return \Swagger\Client\Model\PrivilegeValidation
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createPrivilegeRequest($new_privilege_validation)
    {
        list($response) = $this->createPrivilegeRequestWithHttpInfo($new_privilege_validation);
        return $response;
    }

    /**
     * Operation createPrivilegeRequestWithHttpInfo
     *
     * Create a request for consuming a privilege. Antes de llamar a este metodo hemos tenido que realizar una llamada a getPrivilege. Este metodo nos devuelve un transactionId que hay que pasar ha este metodo para confirmar que el privilegio devuelto se ha consumido.
     *
     * @param \Swagger\Client\Model\NewPrivilegeValidation $new_privilege_validation The id of the privilege to retrieve. (required)
     * @return Array of \Swagger\Client\Model\PrivilegeValidation, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createPrivilegeRequestWithHttpInfo($new_privilege_validation)
    {
        // verify the required parameter 'new_privilege_validation' is set
        if ($new_privilege_validation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $new_privilege_validation when calling createPrivilegeRequest');
        }
        // parse inputs
        $resourcePath = "/privilege-validation";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($new_privilege_validation)) {
            $_tempBody = $new_privilege_validation;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PrivilegeValidation',
                '/privilege-validation'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PrivilegeValidation', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PrivilegeValidation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBestPrivilege
     *
     * Obtener el mejor privilegio para un nif y un importe desde un proveedor. Un proveedor consultará con sus credenciales los privilegioss que un cliente final puede disfrutar en su establecimiento para un importe de compra definido. Los datos del proveedor se obtienen del contexto de seguridad, mientras que los datos del beneficiario de los privilegios y el importe de la compra deben informarse en el Query String de la URL
     *
     * @param string $nif El número de identificación fiscal del usuario (required)
     * @param double $amount El valor de la compra (required)
     * @return \Swagger\Client\Model\Privilege
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getBestPrivilege($nif, $amount)
    {
        list($response) = $this->getBestPrivilegeWithHttpInfo($nif, $amount);
        return $response;
    }

    /**
     * Operation getBestPrivilegeWithHttpInfo
     *
     * Obtener el mejor privilegio para un nif y un importe desde un proveedor. Un proveedor consultará con sus credenciales los privilegioss que un cliente final puede disfrutar en su establecimiento para un importe de compra definido. Los datos del proveedor se obtienen del contexto de seguridad, mientras que los datos del beneficiario de los privilegios y el importe de la compra deben informarse en el Query String de la URL
     *
     * @param string $nif El número de identificación fiscal del usuario (required)
     * @param double $amount El valor de la compra (required)
     * @return Array of \Swagger\Client\Model\Privilege, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getBestPrivilegeWithHttpInfo($nif, $amount)
    {
        // verify the required parameter 'nif' is set
        if ($nif === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nif when calling getBestPrivilege');
        }
        // verify the required parameter 'amount' is set
        if ($amount === null) {
            throw new \InvalidArgumentException('Missing the required parameter $amount when calling getBestPrivilege');
        }
        // parse inputs
        $resourcePath = "/privileges/bestPrivilege";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($nif !== null) {
            $queryParams['nif'] = $this->apiClient->getSerializer()->toQueryValue($nif);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = $this->apiClient->getSerializer()->toQueryValue($amount);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Privilege',
                '/privileges/bestPrivilege'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Privilege', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Privilege', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPrivilegeByToken
     *
     * Obtener el mejor privilegio para un token y un importe desde un proveedor. Un proveedor consultará con sus credenciales los privilegioss que un cliente final puede disfrutar en su establecimiento para un importe de compra definido. Los datos del proveedor se obtienen del contexto de seguridad, mientras que los datos del beneficiario de los privilegios y el importe de la compra deben informarse en el Query String de la URL
     *
     * @param string $token El token proporcionado por Privilegiis (required)
     * @param double $amount El valor de la compra (optional)
     * @return \Swagger\Client\Model\Privilege
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPrivilegeByToken($token, $amount = null)
    {
        list($response) = $this->getPrivilegeByTokenWithHttpInfo($token, $amount);
        return $response;
    }

    /**
     * Operation getPrivilegeByTokenWithHttpInfo
     *
     * Obtener el mejor privilegio para un token y un importe desde un proveedor. Un proveedor consultará con sus credenciales los privilegioss que un cliente final puede disfrutar en su establecimiento para un importe de compra definido. Los datos del proveedor se obtienen del contexto de seguridad, mientras que los datos del beneficiario de los privilegios y el importe de la compra deben informarse en el Query String de la URL
     *
     * @param string $token El token proporcionado por Privilegiis (required)
     * @param double $amount El valor de la compra (optional)
     * @return Array of \Swagger\Client\Model\Privilege, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPrivilegeByTokenWithHttpInfo($token, $amount = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling getPrivilegeByToken');
        }
        // parse inputs
        $resourcePath = "/privileges/token";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($token !== null) {
            $queryParams['token'] = $this->apiClient->getSerializer()->toQueryValue($token);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = $this->apiClient->getSerializer()->toQueryValue($amount);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Privilege',
                '/privileges/token'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Privilege', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Privilege', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPrivilegeValidations
     *
     * Obtener una lista cronológica inversa de todos las solicitudes de privilegio realizadas a través del proveedor autorizado
     *
     * @param int $page Número de página (optional)
     * @param int $size Número de elementos por página (optional)
     * @return \Swagger\Client\Model\PrivilegeValidations
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPrivilegeValidations($page = null, $size = null)
    {
        list($response) = $this->getPrivilegeValidationsWithHttpInfo($page, $size);
        return $response;
    }

    /**
     * Operation getPrivilegeValidationsWithHttpInfo
     *
     * Obtener una lista cronológica inversa de todos las solicitudes de privilegio realizadas a través del proveedor autorizado
     *
     * @param int $page Número de página (optional)
     * @param int $size Número de elementos por página (optional)
     * @return Array of \Swagger\Client\Model\PrivilegeValidations, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPrivilegeValidationsWithHttpInfo($page = null, $size = null)
    {
        // parse inputs
        $resourcePath = "/privilege-validation";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PrivilegeValidations',
                '/privilege-validation'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PrivilegeValidations', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PrivilegeValidations', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
